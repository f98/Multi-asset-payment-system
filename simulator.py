import streamlit as st
from customers import Customer

# Set the title of the page
st.title('Expected Gains')
# 

# Create three columns for input fields
col1, col2, col3, col4, col5, col6, col7,col8 = st.columns(8)

# Input field for time preference
#transaction_date = col1.date_input('Transaction date')

# Input filed for cashing out
#exit_position = col2.date_input('Exit Position')
# expected exchnage rate 
#e_rate=""

# Input your customer profile
# Input your customer profile
class Customer:
    def __init__(self, name, dollar_holdings, euro_holdings, euro_percentage, dollar_percentage):
        self.name = name
        self.dollar_holdings = dollar_holdings
        self.euro_holdings = euro_holdings
        self.euro_percentage = euro_percentage
        self.dollar_percentage = dollar_percentage

# Create instances of the Customer class
Alice = Customer("Alice", 1000, 800, 0.15, 0.85)
Bob = Customer('Bob', 5000, 1500, 0.25, 0.75)
Ali = Customer('Ali', 2500, 1500, 0.10, 0.90)
Asma = Customer('Asma', 2500, 3000, 0.35, 0.65)

# Get the list of customer names
customer_options = [Alice.name, Bob.name, Ali.name, Asma.name]

# Select a customer
selected_customer_name = col1.selectbox('Customer', customer_options)

# Get the selected customer object
def get_customer(name):
    if name == "Alice":
        return Alice
    elif name == "Bob":
        return Bob
    elif name == "Ali":
        return Ali
    elif name == "Asma":
        return Asma

selected_customer = get_customer(selected_customer_name)

current_exchange_rate = col3.slider('current exchange rate', min_value=0.89, max_value=0.96, step=0.001)
dollar_depreciation_rate=col5.slider('dollar depreciation rate', min_value=0.000, max_value=0.1, step=0.001)
final_exchange_rate=current_exchange_rate-dollar_depreciation_rate

def outcome(value_sold, selected_customer, final_exchange_rate):
    total_monetary_value = (selected_customer.dollar_percentage * value_sold) + (selected_customer.euro_percentage * value_sold * (1/final_exchange_rate))
    return total_monetary_value


# Result
value_sold = st.slider('Value sold',min_value=0,max_value=5000,step=10)

# average competitor
value_received_with_avg_competitor=(value_sold*0.98)-0.30
# cost with average competitor
cost_with_avg_competitor=(value_sold*0.02) +0.3


if st.button("Apply"):
    final_amount_sold = outcome(value_sold,selected_customer,final_exchange_rate)
    st.write("total monetary value generated by the transaction using MAPS:", final_amount_sold,'$')
    my_gain=((final_amount_sold-value_sold)*0.2)+(value_sold*0.01)
    st.write('Maps gain is' ,my_gain)
    Money_i_will_recieve_as_merchant =final_amount_sold-my_gain
    merchant_excess_money=Money_i_will_recieve_as_merchant-value_sold
    st.write('the monetary value you will receive if you use a payment provider that averages a 2 percent fee plus a fixed fee',value_sold-cost_with_avg_competitor)
    st.write('Money I will receive as merchant ', Money_i_will_recieve_as_merchant)
    st.write('the excess money I will make  as a merchant ',merchant_excess_money)

    